import EventEmiter from 'eventemitter3';
import { IStyleTransform, ITransform, TransformWatcher } from './types';
export default class Transform extends EventEmiter implements ITransform {
    constructor(option?: IStyleTransform, targetOption?: TransformWatcher);
    targets: TransformWatcher[];
    translateX: string | number;
    get translateXString(): string;
    translateY: string | number;
    get translateYString(): string;
    translateZ: string | number;
    get translateZString(): string;
    rotateX: number;
    get rotateXString(): string;
    rotateY: number;
    get rotateYString(): string;
    rotateZ: number;
    get rotateZString(): string;
    scaleX: number;
    get scaleXString(): string;
    scaleY: number;
    get scaleYString(): string;
    scaleZ: number;
    get scaleZString(): string;
    skewX: number;
    get skewXString(): string;
    skewY: number;
    get skewYString(): string;
    from(data: IStyleTransform): void;
    apply(target?: TransformWatcher | Array<TransformWatcher>): void;
    bind(target: TransformWatcher): void;
    unbind(target: TransformWatcher): void;
    static createProxy(obj?: IStyleTransform, el?: TransformWatcher): Transform;
    toString(watchProps: Array<string> | undefined): string;
    toJSON(): IStyleTransform;
}
