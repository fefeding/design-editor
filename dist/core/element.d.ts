import EventEmiter from 'eventemitter3';
import JTransform from '../constant/transform';
import JStyle from './style';
import JEvent from '../core/event';
export default class JElement<T extends HTMLElement = HTMLElement> extends EventEmiter {
    constructor(option: any);
    initOption(option: any): void;
    id: string;
    type: string;
    private _children;
    get children(): JElement<HTMLElement>[];
    dom: T;
    parent: JElement | undefined;
    event: JEvent;
    style: JStyle;
    get x(): number | string;
    set x(v: number | string);
    get y(): number | string;
    set y(v: number | string);
    get top(): string | number;
    set top(v: string | number);
    get left(): string | number;
    set left(v: string | number);
    get right(): number | string;
    set right(v: number | string);
    get bottom(): number | string;
    set bottom(v: number | string);
    get width(): string | number;
    set width(v: string | number);
    get height(): string | number;
    set height(v: string | number);
    set rotation(v: number);
    get rotation(): number;
    set angle(v: number);
    get angle(): number;
    get visible(): boolean;
    set visible(v: boolean);
    get zIndex(): number;
    set zIndex(v: number);
    get className(): string;
    set className(v: string);
    transform: JTransform;
    setDomStyle(name: string, value: string): void;
    css(name: string | Object, value?: string | number): this;
    attr(name: string, value: string | number | undefined): any;
    bindEvent(): void;
    move(dx: any, dy: any): void;
    resize(w: any, h: any): void;
    addChild(child: JElement | HTMLElement, parent?: JElement): JElement<HTMLElement>;
    remove(): void;
    removeChild(el: JElement | HTMLElement): JElement<HTMLElement>[];
    toJSON(props?: any[]): {
        children: any[];
    };
    toString(): string;
    toHtml(): string;
}
